/**
 * FIXME: アプリバージョンに書き換える
 */
def APP_VERSION = "1.0"


apply plugin: 'com.android.application'
apply plugin: 'com.eaglesakura.ci-support'
apply plugin: 'me.tatarka.retrolambda' /* Android Lambda */

configurations {
    all*.exclude group: "com.google.code.findbugs", module: "jsr305"
    all*.exclude group: "org.apache.httpcomponents", module: "httpclient"
}

dependencies {
    if (!EGLIBRARY_COMPILE_LOCAL) {
        /**
         * 標準フレームワーク
         */
        compile 'com.eaglesakura:simple-logger:1.+'
        compile 'com.eaglesakura:simple-utils:1.+'
        compile 'com.eaglesakura:simple-serialize:1.+'
        compile('com.eaglesakura:android-simple-utils:1.+') {
            exclude(group: "com.android.support")
            exclude(group: "com.google.android.gms")
            exclude(group: "com.google.firebase")
        }
        compile('com.eaglesakura:android-thread:1.+') {
            exclude(group: "com.android.support")
            exclude(group: "com.google.android.gms")
            exclude(group: "com.google.firebase")
        }
        compile('com.eaglesakura:android-text-kvs:2.+') {
            exclude(group: "com.android.support")
            exclude(group: "com.google.android.gms")
            exclude(group: "com.google.firebase")
        }
        compile('com.eaglesakura:android-net:1.+') {
            exclude(group: "com.android.support")
            exclude(group: "com.google.android.gms")
            exclude(group: "com.google.firebase")
        }
        compile('com.eaglesakura:rxandroid-support:2.+') {
            exclude(group: "com.android.support")
            exclude(group: "com.google.android.gms")
            exclude(group: "com.google.firebase")
        }
        compile('com.eaglesakura:onactivityresult-invoke:1.+') {
            exclude(group: "com.android.support")
            exclude(group: "com.google.android.gms")
            exclude(group: "com.google.firebase")
        }
        compile('com.eaglesakura:small-aquery:+') {
            exclude(group: "com.android.support")
            exclude(group: "com.google.android.gms")
            exclude(group: "com.google.firebase")
        }
        compile('com.eaglesakura:greendao-wrapper:2.+') {
            exclude(group: "com.android.support")
            exclude(group: "com.google.android.gms")
            exclude(group: "com.google.firebase")
        }
        compile('com.eaglesakura:margarineknife:1.+') {
            exclude(group: "com.android.support")
            exclude(group: "com.google.android.gms")
            exclude(group: "com.google.firebase")
        }
        compile('com.eaglesakura:android-framework:2.+') {
            exclude(group: "com.android.support")
            exclude(group: "com.google.android.gms")
            exclude(group: "com.google.firebase")
        }

        /**
         * Optional
         */
//        compile('com.eaglesakura:android-egl:1.+') {
//            exclude(group: "com.android.support")
//            exclude(group: "com.google.android.gms")
//            exclude(group: "com.google.firebase")
//        }
//        compile('com.eaglesakura:android-camera:1.+') {
//            exclude(group: "com.android.support")
//            exclude(group: "com.google.android.gms")
//            exclude(group: "com.google.firebase")
//        }
//        compile('com.eaglesakura:android-bluetooth:1.+') {
//            exclude(group: "com.android.support")
//            exclude(group: "com.google.android.gms")
//            exclude(group: "com.google.firebase")
//        }
//        compile('com.eaglesakura:android-command-service:1.+') {
//            exclude(group: "com.android.support")
//            exclude(group: "com.google.android.gms")
//            exclude(group: "com.google.firebase")
//        }
//        compile('com.eaglesakura:android-gms:1.+') {
//            exclude(group: "com.android.support")
//            exclude(group: "com.google.android.gms")
//            exclude(group: "com.google.firebase")
//        }
//        compile('com.eaglesakura:android-firebase:1.+') {
//            exclude(group: "com.android.support")
//            exclude(group: "com.google.android.gms")
//            exclude(group: "com.google.firebase")
//        }

        /**
         * UnitTest
         */
        androidTestCompile('com.eaglesakura:android-devicetest-support:2.+') {
            exclude(group: "com.android.support")
            exclude(group: "com.google.android.gms")
            exclude(group: "com.google.firebase")
        }
        testCompile('com.eaglesakura:android-unittest-support:1.+') {
            exclude(group: "com.android.support")
            exclude(group: "com.google.android.gms")
            exclude(group: "com.google.firebase")
        }
    } else {
        // private.gradleで EGLIBRARY_COMPILE_LOCAL=true の場合にソースコード単位でフレームワークを取り込む

        /**
         * 標準フレームワーク
         */
        compile project(":eglibrary:simple-logger")
        compile project(":eglibrary:simple-utils")
        compile project(':eglibrary:android-thread')
        compile project(':eglibrary:android-text-kvs')
        compile project(':eglibrary:android-net')
        compile project(':eglibrary:android-framework')
        compile project(':eglibrary:greendao-wrapper')

        /**
         * Optional
         */
//        compile project(':eglibrary:android-camera')            // Camera API対応
//        compile project(':eglibrary:android-command-service')   // Service対応
//        compile project(':eglibrary:android-bluetooth')         // Bluetooth対応
//        compile project(":eglibrary:android-gms")               // Google Play Service対応
//        compile project(":eglibrary:android-firebase")          // Firebase対応

        /**
         * UnitTest
         */
        androidTestCompile project(":eglibrary:android-devicetest-support")
        testCompile project(":eglibrary:android-unittest-support")
    }

    /**
     * Android Support Library
     */
    compile "com.android.support:support-v4:${ANDROID_SUPPORT_LIB_VERSION}"
    compile "com.android.support:appcompat-v7:${ANDROID_SUPPORT_LIB_VERSION}"
    compile "com.android.support:cardview-v7:${ANDROID_SUPPORT_LIB_VERSION}"
    compile "com.android.support:recyclerview-v7:${ANDROID_SUPPORT_LIB_VERSION}"
    compile "com.android.support:palette-v7:${ANDROID_SUPPORT_LIB_VERSION}"
    compile "com.android.support:design:${ANDROID_SUPPORT_LIB_VERSION}"
    compile "com.android.support:support-vector-drawable:${ANDROID_SUPPORT_LIB_VERSION}"
    compile "com.android.support:support-annotations:${ANDROID_SUPPORT_LIB_VERSION}"
//    compile "com.android.support:percent:${ANDROID_SUPPORT_LIB_VERSION}"                  // PercentLayout
//    compile "com.android.support:exifinterface:${ANDROID_SUPPORT_LIB_VERSION}"            // Exif Interface
//    compile "com.android.support:customtabs:${ANDROID_SUPPORT_LIB_VERSION}"               // Chrome Custom Tabs

    /**
     * Play Service
     * https://developers.google.com/android/guides/overview
     * https://developers.google.com/android/guides/setup
     */
//    compile "com.google.android.gms:play-services-plus:${ANDROID_PLAYSERVICE_LIB_VERSION}"        // Google+
//    compile "com.google.android.gms:play-services-auth:${ANDROID_PLAYSERVICE_LIB_VERSION}"        // Google Login
//    compile "com.google.android.gms:play-services-identity:${ANDROID_PLAYSERVICE_LIB_VERSION}"    // Google Address API
//    compile "com.google.android.gms:play-services-analytics:${ANDROID_PLAYSERVICE_LIB_VERSION}"   // Google Analytics
//    compile "com.google.android.gms:play-services-awareness:${ANDROID_PLAYSERVICE_LIB_VERSION}"   // Google Awareness
//    compile "com.google.android.gms:play-services-cast:${ANDROID_PLAYSERVICE_LIB_VERSION}"        // Google Cast
//    compile "com.google.android.gms:play-services-gcm:${ANDROID_PLAYSERVICE_LIB_VERSION}"         // Google Cloud Messaging
//    compile "com.google.android.gms:play-services-drive:${ANDROID_PLAYSERVICE_LIB_VERSION}"       // Google Drive
//    compile "com.google.android.gms:play-services-fitness:${ANDROID_PLAYSERVICE_LIB_VERSION}"     // Google Fit
//    compile "com.google.android.gms:play-services-location:${ANDROID_PLAYSERVICE_LIB_VERSION}"    // Google Location and Activity Recognition
//    compile "com.google.android.gms:play-services-maps:${ANDROID_PLAYSERVICE_LIB_VERSION}"        // Google Maps
//    compile "com.google.android.gms:play-services-ads:${ANDROID_PLAYSERVICE_LIB_VERSION}"         // Google Mobile Ads
//    compile "com.google.android.gms:play-services-places:${ANDROID_PLAYSERVICE_LIB_VERSION}"      // Google Places
//    compile "com.google.android.gms:play-services-vision:${ANDROID_PLAYSERVICE_LIB_VERSION}"      // Mobile Vision
//    compile "com.google.android.gms:play-services-nearby:${ANDROID_PLAYSERVICE_LIB_VERSION}"      // Google Nearby
//    compile "com.google.android.gms:play-services-panorama:${ANDROID_PLAYSERVICE_LIB_VERSION}"    // Google Panorama Viewer
//    compile "com.google.android.gms:play-services-games:${ANDROID_PLAYSERVICE_LIB_VERSION}"       // Google Play Game services
//    compile "com.google.android.gms:play-services-safetynet:${ANDROID_PLAYSERVICE_LIB_VERSION}"   // SafetyNet
//    compile "com.google.android.gms:play-services-wallet:${ANDROID_PLAYSERVICE_LIB_VERSION}"      // Android Pay
//    compile "com.google.android.gms:play-services-wearable:${ANDROID_PLAYSERVICE_LIB_VERSION}"    // Android Wear

    /**
     * Firebase
     */
//    compile "com.google.firebase:firebase-appindexing:${ANDROID_PLAYSERVICE_LIB_VERSION}"         // App Indexing
//    compile "com.google.firebase:firebase-core:${ANDROID_PLAYSERVICE_LIB_VERSION}"                // Firebase Core
//    compile "com.google.firebase:firebase-auth:${ANDROID_PLAYSERVICE_LIB_VERSION}"                // Firebase Auth
//    compile "com.google.firebase:firebase-config:${ANDROID_PLAYSERVICE_LIB_VERSION}"              // Firebase Remote Configs
//    compile "com.google.firebase:firebase-database:${ANDROID_PLAYSERVICE_LIB_VERSION}"            // Firebase Realtime Database
//    releaseCompile "com.google.firebase:firebase-crash:${ANDROID_PLAYSERVICE_LIB_VERSION}"

    /**
     * Remote Debug
     */
    debugCompile 'com.deploygate:sdk:3.1.1'

    /**
     * Android Things対応の場合
     */
//    provided 'com.google.android.things:androidthings:0.1-devpreview'

    /**
     * Android Canvas Test
     */
//    testCompile 'org.khronos:opengl-api:gl1.1-android-2.1_r1'

}

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_7
    }

    dataBinding {
        enabled = true
    }

    defaultConfig {
        /**
         * FIXME: ApplicationID(package name)に書き換える
         */
        applicationId "replace.your.app_package"
        minSdkVersion 19
        targetSdkVersion 25

        versionCode eglibrary.ci.buildVersionCode as int
        versionName "${APP_VERSION}${getArtifactVersionSuffix()}"
        vectorDrawables.useSupportLibrary = true        // using vector drawable

        /**
         * BuildConfig情報を必要に応じて追加する
         */
        buildConfigField "String", "BUILD_DATE", "\"${eglibrary.ci.buildDate}\""
        buildConfigField "String", "BASE_APP_VERSION", "\"${APP_VERSION}\"";
        buildConfigField "int", "BUILD_NUMBER", "${eglibrary.ci.buildVersionCode as int}";  // ビルド番号
        buildConfigField "boolean", "BUILD_FROM_CI", "${eglibrary.ci.ciRunning}";  // CIフラグ

        /**
         * AndroidManifest.xmlの動的書き換えを利用する
         */
        manifestPlaceholders = [
                google_api_key: "@string/google_api_key"
        ]

        /**
         * 日本語と英語リソースのみを残す
         */
        resConfigs "en", "ja"

        /**
         * UnitTest
         */
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    sourceSets {
        main {
            java.srcDirs += [
                    'src/main/gen/java',
            ]
        }
    }

    /**
     * アプリ署名設定
     */
    signingConfigs {
        debug {
            storeFile DEBUG_KEYSTORE_FILE_PATH
            storePassword DEBUG_KEYSTORE_PASS
            keyAlias DEBUG_KEYSTORE_ALIAS_NAME
            keyPassword DEBUG_KEYSTORE_ALIAS_PASS
        }

        release {
            storeFile RELEASE_KEYSTORE_FILE_PATH
            storePassword RELEASE_KEYSTORE_PASS
            keyAlias RELEASE_KEYSTORE_ALIAS_NAME
            keyPassword RELEASE_KEYSTORE_ALIAS_PASS
        }
    }

//    productFlavors {
//        // 必要に応じて追加する
//        develop {
//            minSdkVersion 21
//        }
//    }


    buildTypes {

        debug {
            applicationIdSuffix = ".debug"
            signingConfig signingConfigs.debug
        }

        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    dexOptions {
        // memo: http://developer.covelline.com/2015/06/circle-ci/
        javaMaxHeapSize eglibrary.ci.ciRunning ? "1g" : "4g"
        maxProcessCount eglibrary.ci.ciRunning ? 1 : 4
        threadCount eglibrary.ci.ciRunning ? 1 : 8
        preDexLibraries !eglibrary.ci.ciRunning
    }


    lintOptions {
        disable "DuplicateIds"
        disable "NewApi"
        disable "InvalidPackage"
        disable "ProtectedPermissions"
        disable "ResourceType"
//        abortOnError false
    }

    /**
     * アプリ実行に不要となるファイルのテンプレート
     */
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/rxjava.properties'
        exclude "**/**annotations.gwt.xml"
        exclude "**/**-setter_store.bin"
        exclude "**/**-layoutinfo.bin"
        exclude "**/**-br.bin"
    }
    testOptions {
        unitTests.all {
            // CIではVM使用量を抑える
            if (eglibrary.ci.ciRunning) {
                jvmArgs '-Xmx2048m', '-XX:+HeapDumpOnOutOfMemoryError'
            }
        }
    }
}

/**
 * UnitTest & retro lambda
 */
tasks.withType(Test) {
    project.tasks
            .findAll {
        task -> (task.name ==~ /compile.*?TestJava.*?/)
    }
    .each { task ->
        task.doFirst {
            sourceCompatibility = JavaVersion.VERSION_1_8
            targetCompatibility = JavaVersion.VERSION_1_8
        }
    }
}

/**
 * バージョンを取得する
 * CircleCIの場合、バージョン末尾にビルド番号を付与する
 */
def getArtifactVersionSuffix() {
    if (System.env.CIRCLE_BUILD_NUM != null) {
        // CircleCIのバージョンが指定されているので、そちらを利用する
        return ".${System.env.CIRCLE_BUILD_NUM}"
    } else {
        return ".local"
    }
}

apply from: "generator.gradle"

/**
 * Slackに通知を行なう
 */
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'com.mindera.gradle.slack'
apply plugin: 'com.github.ben-manes.versions'

slack {
    url System.getenv("SLACK_HOOK_URL");
    dependsOnTasks 'assembleDebug', 'assembleRelease', 'testDebugUnitTest', 'dependencyUpdates';
    title file("../").name;
    enabled = eglibrary.ci.ciRunning && (System.getenv("SLACK_HOOK_URL") != null)
//    enabled = true
    gitInfo = true
}

/**
 * Dexで使用されているメソッド数の統計を取る
 */
apply plugin: 'com.getkeepsafe.dexcount'
dexcount {
    format = "json"
    includeClasses = false
    includeFieldCount = true
    includeTotalMethodCount = true
    orderByMethodCount = true
    verbose = false
}

/**
 * FIXME: Google Play Serviceを利用する場合は有効化する
 */
//apply plugin: 'com.google.gms.google-services'
